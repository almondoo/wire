COMPLETE LIST OF ALL ERROR MESSAGES IN WIRE
============================================

Extracted from: /home/user/wire/internal/wire/*.go

PARSE.GO - VARIABLE AND OBJECT HANDLING
========================================
1. "%v is not a provider or a provider set" (line 485, 498)

PARSE.GO - EXPRESSION PROCESSING
=================================
2. "unknown pattern fnObj nil" (line 536)
3. "unknown pattern - pkg in fnObj is nil - %s" (line 540)
4. "unknown pattern" (lines 543, 580, 590)

PARSE.GO - FUNCTION PROVIDER VALIDATION
========================================
5. "wrong signature for provider %s: %v" (line 681)
6. "provider has multiple parameters of type %s" (line 700)

PARSE.GO - FUNCTION OUTPUT VALIDATION
======================================
7. "no return values" (line 726)
8. "second return type is %s; must be error or func()" (line 737)
9. "second return type is %s; must be func()" (line 741)
10. "third return type is %s; must be error" (line 744)
11. "too many return values" (line 752)

PARSE.GO - STRUCT LITERAL PROVIDER
===================================
12. "%v does not name a struct" (line 766) [DEPRECATED PATH]
13. "using struct literal to inject %s is deprecated..." (line 773) [WARNING TO STDERR]
14. "provider struct has multiple fields of type %s" (line 791)

PARSE.GO - STRUCT PROVIDER
===========================
15. "call to Struct must specify the struct to be injected" (line 805)
16. "first argument to Struct must be a pointer to a named struct; found %s" (line 812)
17. "provider struct has multiple fields of type %s" (line 858)

PARSE.GO - WIRE.BIND
====================
18. "call to Bind takes exactly two arguments" (line 888)
19. "first argument to Bind must be a pointer to an interface type; found %s" (lines 896, 902)
20. "second argument to Bind must be a pointer or a pointer to a pointer; found %s" (line 910)
21. "cannot bind interface to itself" (line 916)
22. "%s does not implement %s" (line 920)

PARSE.GO - WIRE.VALUE
======================
23. "call to Value takes exactly one argument" (line 934)
24. "argument to Value is too complex" (line 959)
25. "argument to Value may not be an interface value (found %s); use InterfaceValue instead" (line 964)

PARSE.GO - WIRE.INTERFACEVALUE
===============================
26. "call to InterfaceValue takes exactly two arguments" (line 979)
27. "first argument to InterfaceValue must be a pointer to an interface type; found %s" (lines 984, 989)
28. "%s does not implement %s" (line 993)

PARSE.GO - WIRE.FIELDSOF
=========================
29. "call to FieldsOf must specify fields to be extracted" (line 1009)
30. "first argument to FieldsOf must be a pointer to a struct or a pointer to a pointer to a struct; found %s" (lines 1016, 1033)
31. "fields number exceeds the number available in the struct which has %d fields" (line 1037)

PARSE.GO - FIELD SPECIFICATION
==============================
32. "%v must be a string with the field name" (line 1068)
33. "%s is prevented from injecting by wire" (line 1073)
34. "%s is not a field of %s" (line 1078)

PARSE.GO - INJECTOR VALIDATION
===============================
35. "a call to wire.Build indicates that this function is an injector, but injectors must consist of only the wire.Build call and an optional return" (line 1131)

ANALYZE.GO - DEPENDENCY SOLVING
================================
36. "no provider found for %s, output of injector" (line 129)
37. "no provider found for %s" (line 134)
38. "failed to visit" [internal error] (line 109)

ANALYZE.GO - PROVIDER MAP BUILDING
===================================
39. "wire.Bind of concrete type %q to interface %q, but %s does not include a provider for %q" (line 420)

ANALYZE.GO - CYCLE DETECTION
=============================
40. "cycle for %s: ..." (line 480-491, multi-line format with providers)

ANALYZE.GO - UNUSED RESOURCES
==============================
41. "unused provider set" (line 272)
42. "unused provider set %q" (line 274)
43. "unused provider %q" (line 287)
44. "unused value of type %s" (line 299)
45. "unused interface binding to type %s" (line 311)
46. "unused field %q.%s" (line 323)

WIRE.GO - OUTPUT DIRECTORY
===========================
47. "no files to derive output directory from" (line 126)
48. "found conflicting directories %q and %q" (line 131)

WIRE.GO - INJECTOR FUNCTION SIGNATURE
======================================
49. "inject %s: %v" (lines 167, 169, 314, 322, 324) [wrapper for other errors]

WIRE.GO - INJECT FUNCTION
===========================
50. "inject %s: provider for %s returns cleanup but injection does not return cleanup function" (line 340)
51. "inject %s: provider for %s returns error but injection not allowed to fail" (line 346)
52. "inject %s: value %s can't be used: %v" (line 354)

WIRE.GO - ACCESSIBILITY
=======================
53. "uses unexported identifier %s" (line 944)
54. "%s is not declared in package scope" (line 948)

ERRORS.GO - ERROR INFRASTRUCTURE
=================================
(No error messages, only error container and position tracking)

TOTAL UNIQUE ERROR MESSAGE PATTERNS: 54
TOTAL ERROR GENERATION POINTS: ~79

NOTES
=====

1. Some error messages are templates with %s, %d, %v format specifiers
2. Some errors wrap other errors with "inject X: %v" pattern
3. Some errors are caught by Go compiler before Wire runs (e.g., wrong function argument counts)
4. Some error messages include multi-line output (cycles, traces)
5. One deprecation warning goes to stderr (struct literal provider)

ERROR SEVERITY CLASSIFICATION
==============================

CRITICAL (breaks compilation):
- Cycles, missing providers, multiple bindings
- Invalid injector structure
- Type incompatibility errors
- Visibility errors

HIGH (prevents Wire from running):
- Invalid provider/value/binding specifications
- Output directory issues
- Function signature errors

MEDIUM (user configuration errors):
- Unused resources
- Field/argument validation errors
- Wire.Value/FieldsOf/Bind argument errors

LOW (edge cases):
- Self-binding
- Complex expressions

